;#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.
;#Warn  ; Enable warnings to assist with detecting common errors.
;SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
;SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.

global listOfEvents := []


global desktopSwitcher := new CDesktopSwitcher()




; ----------------- Desktop Switcher Class
class CDesktopSwitcher {

	activeWindowByDesktop := {}

	__New() {
		;MsgBox inside the __new method
		this.hwnd:=WinExist("ahk_pid " . DllCall("GetCurrentProcessId","Uint"))
		this.hwnd+=0x1000<<32
		
		this.InitializeDLL()
		this.SetupExplorerListener()
		this.SetupDesktopChangeListener()
		this.SetHotkeyState()
	}
	
	InitializeDLL() {
		MajorVersion := DllCall("GetVersion") & 0xFF                ; 10
		MinorVersion := DllCall("GetVersion") >> 8 & 0xFF           ; 0
		BuildNumber  := DllCall("GetVersion") >> 16 & 0xFFFF        ; 10532
		;MsgBox % "MajorVersion:`t" MajorVersion "`n" "MinorVersion:`t" MinorVersion "`n" "BuildNumber:`t"  BuildNumber "`n" "dir:" A_ScriptDir
		;  load the correct DLL based on the version of windows.  i.e.  < 1803 vs  > 1803    different lib required.
		if (BuildNumber <= 17134) {
			this.hVirtualDesktopAccessor := DllCall("LoadLibrary", Str, A_ScriptDir . "\dll\VirtualDesktopAccessor_1803_and_lower.dll", "Ptr") 
		}
		if (BuildNumber > 17134) {
			this.hVirtualDesktopAccessor := DllCall("LoadLibrary", Str, A_ScriptDir . "\dll\VirtualDesktopAccessor_1809_and_above.dll", "Ptr") 
		}
		
		this.GoToDesktopNumberProc := DllCall("GetProcAddress", Ptr, this.hVirtualDesktopAccessor, AStr, "GoToDesktopNumber", "Ptr")
		this.GetCurrentDesktopNumberProc := DllCall("GetProcAddress", Ptr, this.hVirtualDesktopAccessor, AStr, "GetCurrentDesktopNumber", "Ptr")
		this.GetWindowDesktopIdProc := DllCall("GetProcAddress", Ptr, this.hVirtualDesktopAccessor, AStr, "GetWindowDesktopId", "Ptr")
		this.GetWindowDesktopNumberProc := DllCall("GetProcAddress", Ptr, this.hVirtualDesktopAccessor, AStr, "GetWindowDesktopNumber", "Ptr")
		this.IsWindowOnCurrentVirtualDesktopProc := DllCall("GetProcAddress", Ptr, this.hVirtualDesktopAccessor, AStr, "IsWindowOnCurrentVirtualDesktop", "Ptr")
		this.MoveWindowToDesktopNumberProc := DllCall("GetProcAddress", Ptr, this.hVirtualDesktopAccessor, AStr, "MoveWindowToDesktopNumber", "Ptr")
		this.RegisterPostMessageHookProc := DllCall("GetProcAddress", Ptr, this.hVirtualDesktopAccessor, AStr, "RegisterPostMessageHook", "Ptr")
		this.UnregisterPostMessageHookProc := DllCall("GetProcAddress", Ptr, this.hVirtualDesktopAccessor, AStr, "UnregisterPostMessageHook", "Ptr")
		this.IsPinnedWindowProc := DllCall("GetProcAddress", Ptr, this.hVirtualDesktopAccessor, AStr, "IsPinnedWindow", "Ptr")
		this.RestartVirtualDesktopAccessorProc := DllCall("GetProcAddress", Ptr, this.hVirtualDesktopAccessor, AStr, "RestartVirtualDesktopAccessor", "Ptr")
		; GetWindowDesktopNumberProc := DllCall("GetProcAddress", Ptr, hVirtualDesktopAccessor, AStr, "GetWindowDesktopNumber", "Ptr")
				
	}
	
		; Turns On or Off hotkeys, or sets the mode
    SetHotkeyState(){
		fn := this.GoToDesktopNumber.Bind(this, 0)
		hotkey, <!1, % fn		
		fn := this.GoToDesktopNumber.Bind(this, 1)
		hotkey, <!2, % fn 
		fn := this.GoToDesktopNumber.Bind(this, 2)
		hotkey, <!3, % fn  
		fn := this.GoToDesktopNumber.Bind(this, 3)
		hotkey, <!4, % fn  
		fn := this.GoToDesktopNumber.Bind(this, 4)
		hotkey, <!5, % fn  
		fn := this.GoToDesktopNumber.Bind(this, 5)
		hotkey, <!6, % fn  
		fn := this.GoToDesktopNumber.Bind(this, 6)
		hotkey, <!7, % fn  
		fn := this.GoToDesktopNumber.Bind(this, 7)
		hotkey, <!8, % fn  
		fn := this.GoToDesktopNumber.Bind(this, 8)
		hotkey, <!9, % fn  
		fn := this.GoToDesktopNumber.Bind(this, 9)
		hotkey, <!0, % fn  
		fn := this.MoveCurrentWindowToDesktop.Bind(this, 0)
		hotkey, +<!1, % fn  
		fn := this.MoveCurrentWindowToDesktop.Bind(this, 1)
		hotkey, +<!2, % fn  
		fn := this.MoveCurrentWindowToDesktop.Bind(this, 2)
		hotkey, +<!3, % fn  
		fn := this.MoveCurrentWindowToDesktop.Bind(this, 3)
		hotkey, +<!4, % fn  
		fn := this.MoveCurrentWindowToDesktop.Bind(this, 4)
		hotkey, +<!5, % fn  
		fn := this.MoveCurrentWindowToDesktop.Bind(this, 5)
		hotkey, +<!6, % fn  
		fn := this.MoveCurrentWindowToDesktop.Bind(this, 6)
		hotkey, +<!7, % fn  
		fn := this.MoveCurrentWindowToDesktop.Bind(this, 7)
		hotkey, +<!8, % fn  
		fn := this.MoveCurrentWindowToDesktop.Bind(this, 8)
		hotkey, +<!9, % fn  
		fn := this.MoveCurrentWindowToDesktop.Bind(this, 9)
		hotkey, +<!0, % fn  
		fn := this.GoToPrevDesktop.Bind(this)
		hotkey, <!-, % fn  	
		fn := this.GotoNextDesktop.Bind(this)
		hotkey, <!=, % fn  
		
    }

	
	
	
	SetupExplorerListener() {
		; Restart the virtual desktop accessor when Explorer.exe crashes, or restarts (e.g. when coming from fullscreen game)
		this.explorerRestartMsg := DllCall("user32\RegisterWindowMessage", "Str", "TaskbarCreated")
		OnMessage(this.explorerRestartMsg, "OnExplorerRestart")
		
	}
	
	; this will be refactored.
	InitializeAllWindows() {
		global sqas
		if(sqas) {
			sqas.InitializeAllWindows()
		}
	}
	
	SetupDesktopChangeListener() {
		; Windows 10 desktop changes listener
		DllCall(this.RegisterPostMessageHookProc, Int, this.hwnd, Int, 0x1400 + 30)
		OnMessage(0x1400 + 30, "VWMess")
	}
	
	
	; ------ Desktop Operations..
	MoveCurrentWindowToDesktop(number) {
		WinGet, activeHwnd, ID, A
		this.activeWindowByDesktop[number] := 0 ; Do not activate
		DllCall(this.MoveWindowToDesktopNumberProc, UInt, activeHwnd, UInt, number)
		; todo: make this an optional.  by default, i3wm does not automatically focus to the dekstop you're sending the window to.  So the behavior will be the same in this instance.
		; DllCall(GoToDesktopNumberProc, UInt, number)
	}

		
	GoToPrevDesktop() {
		current := DllCall(this.GetCurrentDesktopNumberProc, UInt)
		if (current = 0) {
			this.GoToDesktopNumber(7)
		} else {
			this.GoToDesktopNumber(current - 1)      
		}
		return
	}

	GoToNextDesktop() {
		current := DllCall(this.GetCurrentDesktopNumberProc, UInt)
		if (current = 7) {
			this.GoToDesktopNumber(0)
		} else {
			this.GoToDesktopNumber(current + 1)    
		}
		InitializeAllWindows()
		return
	}

	GoToDesktopNumber(num) {
		; Store the active window of old desktop, if it is not pinned
		WinGet, activeHwnd, ID, A
		current := DllCall(this.GetCurrentDesktopNumberProc, UInt) 
		isPinned := DllCall(this.IsPinnedWindowProc, UInt, activeHwnd)
		if (isPinned == 0) {
			this.activeWindowByDesktop[current] := activeHwnd
		}

		; Try to avoid flashing task bar buttons, deactivate the current window if it is not pinned
		if (isPinned != 1) {
			WinActivate, ahk_class Shell_TrayWnd
		}

		; Change desktop
		DllCall(this.GoToDesktopNumberProc, Int, num)
		return
	}


	getAllVisibleWindowsOnAllVirtualDesktops(){

		WinGet,WinList,List,,,Program Manager
		List=""
		WindowList:={}  ; a list of all windows, Key = VirtualDesktopNumber
		c = 0
		loop,%WinList%{
			Current:=WinList%A_Index%
			If Current {
				c++
				;WinGet, activeHwnd, ID, %WinTitle% 
				activeHwnd := Current
				desktopNumber := DllCall(this.GetWindowDesktopNumberProc, UInt, activeHwnd, Int)
				;MsgBox % guid
				isOnDesktop := DllCall(this.IsWindowOnCurrentVirtualDesktopProc, UInt, activeHwnd, Int)
				if (DllCall(this.IsWindowOnCurrentVirtualDesktopProc, UInt, activeHwnd, Int) == 1) {
					if DllCall("IsWindowVisible", "UInt", activeHwnd) {
						WinGetTitle,WinTitle,ahk_id %Current%

						WinGetPos, X, Y, Width, Height, %WinTitle%
						 ; this doesn't work for some reason... ;; isOnDesktop := DllCall(IsWindowOnCurrentVirtualDesktopProc, UInt, activeHwnd, Int)
						List.="`n" "Desktop:" desktopNumber "   ID:" activeHwnd " --- " WinTitle " x=" X " y=" Y " width=" Width " height=" Height
						if (!WindowList.HasKey(desktopNumber)) {
							WindowList[desktopNumber]:=[]
						}
						WindowList[desktopNumber].Push({ x: X, y: Y, title:WinTitle, height: Height, width: Width, activeHwnd: activeHwnd })
					}
				}
			}
		}
		;MsgBox %List%
		;	MsgBox % c
		;	MsgBox % WindowList.Length()

		; msgList(Wins)
		return WindowList 
	}

	getAllWindowsOnCurrentVirtualDesktop() {
		WL:=this.getAllVisibleWindowsOnAllVirtualDesktops()
		current := DllCall(this.GetCurrentDesktopNumberProc, UInt)
		msgList(WL[current])
		return WL[current]
	}
	
	
	focusToWindow(direction) {
	
		;MsgBox Testing Focus Window
		; declare variables
		WinGetActiveTitle, Title
		WinGet, activeHwnd, ID, %Title%
		
		if (direction == "up") {
		}
		
		if (direction == "down") {
		}
		
		if (direction == "left") {
		}
		
		if (direction == "right") {
		}
		
		
		; look at current active window for coordinates.
		WinGetPos, X, Y, Width, Height, %Title%
		centerX := X + (Width / 2)
		centerY := Y + (Height / 2)
		MsgBox x = %X%, y = %Y%, width=%Width%, height=%Height%, centerX = %centerX%, centerY = %centerY%
		
		; find nearest
		;windows = this.getAllWindowsOnCurrentVirtualDesktop()

	}

}


OnExplorerRestart(wParam, lParam, msg, hwnd) {
	DllCall(desktopSwitcher.RestartVirtualDesktopAccessorProc, UInt, result)
}


VWMess(wParam, lParam, msg, hwnd) {
	desktopNumber := lParam + 1
	
	; Try to restore active window from memory (if it's still on the desktop and is not pinned)
	WinGet, activeHwnd, ID, A 
	isPinned := DllCall(desktopSwitcher.IsPinnedWindowProc, UInt, activeHwnd)
	oldHwnd := desktopSwitcher.activeWindowByDesktop[lParam]
	isOnDesktop := DllCall(desktopSwitcher.IsWindowOnCurrentVirtualDesktopProc, UInt, oldHwnd, Int)
	if (isOnDesktop == 1 && isPinned != 1) {
		WinActivate, ahk_id %oldHwnd%
	}

	; Menu, Tray, Icon, Icons/icon%desktopNumber%.ico
	
	; When switching to desktop 1, set background pluto.jpg
	; if (lParam == 0) {
		; DllCall("SystemParametersInfo", UInt, 0x14, UInt, 0, Str, "C:\Users\Jarppa\Pictures\Backgrounds\saturn.jpg", UInt, 1)
	; When switching to desktop 2, set background DeskGmail.png
	; } else if (lParam == 1) {
		; DllCall("SystemParametersInfo", UInt, 0x14, UInt, 0, Str, "C:\Users\Jarppa\Pictures\Backgrounds\DeskGmail.png", UInt, 1)
	; When switching to desktop 7 or 8, set background DeskMisc.png
	; } else if (lParam == 2 || lParam == 3) {
		; DllCall("SystemParametersInfo", UInt, 0x14, UInt, 0, Str, "C:\Users\Jarppa\Pictures\Backgrounds\DeskMisc.png", UInt, 1)
	; Other desktops, set background to DeskWork.png
	; } else {
		; DllCall("SystemParametersInfo", UInt, 0x14, UInt, 0, Str, "C:\Users\Jarppa\Pictures\Backgrounds\DeskWork.png", UInt, 1)
	; }
}	














































;
;
;  WINDOW FOCUS LOGIC
;
;	


<!j::
	;desktopSwitcher.focusToWindow("left")
	return
<!k::
	;desktopSwitcher.focusToWindow("down")
	return
<!l::
	;desktopSwitcher.focusToWindow("up")
	return

<!;::
	;desktopSwitcher.focusToWindow("right")
	return


<!h::
	;msgLines()
	return




;--------------------------------------------

;------------------ various debug funcs --------------------

; #Include shell_spy.ahk




msgList(l) {
	List=""
	c=0
	for k,v in l {
		c++
		List.="`n" " ID:" v["activeHwnd"] "  Title" v["title"] " ---- X:" v["x"] "   Y:" v["y"]
	}
	;MsgBox % c
		MsgBox %List%

	;DebugMessage(List)
}


msgLines() {
	List=""
	for k,v in listOfEvents {
		List.="`n"v
	}
	MsgBox % List
}







;;;;;;;;;;;;;;;;;;;; debug stuff

DebugMessage(str)
{
 global h_stdout
 DebugConsoleInitialize()  ; start console window if not yet started
 str .= "`n" ; add line feed
 DllCall("WriteFile", "uint", h_Stdout, "uint", &str, "uint", StrLen(str), "uint*", BytesWritten, "uint", NULL) ; write into the console
 WinSet, Bottom,, ahk_id %h_stout%  ; keep console on bottom
}

DebugConsoleInitialize()
{
   global h_Stdout     ; Handle for console
   static is_open = 0  ; toogle whether opened before
   if (is_open = 1)     ; yes, so don't open again
     return
	 
   is_open := 1	
   ; two calls to open, no error check (it's debug, so you know what you are doing)
   DllCall("AttachConsole", int, -1, int)
   DllCall("AllocConsole", int)

   dllcall("SetConsoleTitle", "str","Paddy Debug Console")    ; Set the name. Example. Probably could use a_scriptname here 
   h_Stdout := DllCall("GetStdHandle", "int", -11) ; get the handle
   WinSet, Bottom,, ahk_id %h_stout%      ; make sure it's on the bottom
   WinActivate,Lightroom   ; Application specific; I need to make sure this application is running in the foreground. YMMV
   return
}
